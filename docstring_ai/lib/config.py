"""
This module defines constants and logging configuration for a machine learning-based application that interacts with models and APIs. The main functionalities include specifying model parameters, handling API interactions with retry logic, organizing data storage paths, and configuring a customized logging system with colored output for better readability. The module primarily aims at improving the maintainability and usability of code related to model inference and logging.


### Main Functionalities
1. **Model and API Configuration**:  
   The module manages constants related to model configurations, such as model names, token limits, retry counts, and backoff strategies for API requests.

2. **Context Storage Management**:  
   It defines constants for file paths related to data caching and context management, which optimize the performance of data retrieval operations.

3. **Custom Logging Configuration**:  
   The module implements a custom logging setup that includes colored formatting for different log levels and filtering for specific libraries to enhance the clarity and relevance of log output.


### Purpose
The purpose of this Python file can be summarized as follows:
- To provide a structured approach for constants that configure model interactions and API handling.
- To establish a comprehensive logging solution that improves the debuggability and traceability of code execution.
- To optimize data management and caching strategies for efficient storage and retrieval of important context-related information.

### Constants and Their Descriptions
The file includes a set of constants, each playing a significant role:
1. **MODEL (str)**:  
   - Defines the specific model version to be used for processing tasks. It allows flexibility in updating or changing models as required.

2. **MAX_TOKENS (int)**:  
   - Establishes the maximum number of tokens allowed in a single API request. This safeguard prevents errors relating to input size, ensuring it aligns with model processing capabilities.

3. **EMBEDDING_MODEL (str)**:  
   - Specifies the name of the embedding model for converting text into numerical vectors. This is essential for tasks that require embedding representations.

4. **MAX_RETRIES (int)**:  
   - Indicates the maximum number of retry attempts for API requests in case of temporary failures. This is useful for handling transient errors and improving application resilience.

5. **RETRY_BACKOFF (int)**:  
   - Sets the time to wait before retrying after a failed API request, allowing for controlled retries and reducing server strain.

6. **CHROMA_COLLECTION_NAME (str)**:  
   - Specifies the name of the collection within ChromaDB for storing context data, facilitating organized data retrieval throughout the application lifecycle.

7. **DATA_PATH (Path)**:  
   - Defines the base directory for storing data-related files, using `Path` from the `pathlib` module for better path handling.

8. **CACHE_FILE_NAME (str)**:  
   - Indicates the filename used for caching purposes, contributing to performance optimization by avoiding redundant computations.

9. **CONTEXT_SUMMARY_PATH (str)**:  
   - Specifies the file path for storing context summaries, which provides a means for accessing context information across different processing tasks.

10. **DOCSTRING_AI_TAG**:  
   - A constant indicating the origin of the docstring that was generated by a specific tool.

### Classes
The module defines the following classes:
1. **ColoredFormatter(logging.Formatter)**:
   - A custom logging formatter that adds color coding to log messages based on their severity levels. The color mapping is defined within the class, enhancing the visibility and differentiation of log levels when outputted.  
   **Method**:  
   - `format(self, record)`: Overrides the default format method to apply color to the log level names.

2. **ExcludeLibrariesFilter(logging.Filter)**:
   - A logging filter that excludes log messages from specified libraries. This prevents clutter in logs from libraries that may generate excessive or non-critical logging output. 
   **Method**:  
   - `filter(self, record)`: Returns `True` if the log record's name does not start with any specified modules in the exclusion list.

3. **HTTPRequestFilter(logging.Filter)**:
   - Another logging filter specifically designed to exclude HTTP request logs, providing a cleaner output by not including extensive HTTP interaction logs.  
   **Method**:  
   - `filter(self, record)`: Checks if the message contains 'HTTP Request:' and returns `False` if it does, effectively filtering it out.

### Functions
1. **setup_logging()**:
   - Configures the logging for the application by initializing handlers, formatters, and levels. It creates an instance of `ColoredFormatter` and sets it to a stream handler that outputs to the console. Logging level is set to DEBUG, which captures all levels of logs, and applies filters to suppress logs from specific libraries.

### Structure and Intent
The structure of the module is straightforward, with a clear separation between configuration constants, custom logging classes, and utility functions. It imports necessary libraries like `Path` from `pathlib` for filesystem path handling and `logging` alongside `colorama` for enhanced logging user experience.

The intent is to provide clarity and ease-of-use for developers interacting with the model and debugging through logging. By employing object-oriented principles in the logging configuration and defining constants in a structured manner, the module fosters better coding practices and effective application management.

### Conclusion
In summary, this Python module is integral for efficiently managing configurations related to model interactions, API handling, and logging. By centralizing constants and providing a robust logging setup, it enhances the maintainability, usability, and overall performance of a machine learning application. The well-defined logging structure also aids in debugging by ensuring clear visibility into the application's operational flow.
"""

from pathlib import Path 

# Constants

MODEL = "gpt-4o-mini"  
"""
str: The name of the model to be used for processing tasks.

This constant specifies which version of the model will be employed for inference and processing tasks.
It can be replaced with the appropriate model name based on the specific use case or model availability.

Usage:
    Set this constant to the desired model version before processing tasks.
"""

MAX_TOKENS = 64000  
"""
int: The maximum number of tokens allowed in a single request to the model.

This constant defines the upper limit on the length of the input text, ensuring that it does not exceed 
the processing capabilities of the model being used. This helps prevent errors related to input size and 
optimizes the model's processing performance.

Usage:
    Ensure that input text length does not exceed this limit to avoid errors during processing.
"""

EMBEDDING_MODEL = "text-embedding-3-large"  
"""
str: The name of the OpenAI embedding model used for converting text into embedding vectors.

This constant specifies the model utilized to generate numerical representations of the input text data, 
which are necessary for various natural language processing tasks such as text classification, semantic 
similarity, or clustering.

Usage:
    Use this model when embedding text data for any subsequent NLP tasks requiring embeddings.
"""

MAX_RETRIES = 5  
"""
int: The maximum number of retry attempts for API requests.

This constant defines how many times the system should attempt to resend a request to an external service 
if the first attempt fails due to a transient error. This is beneficial for improving the resilience of 
the application against temporary network issues or service interruptions.

Usage:
    Modify this value to adjust the application's tolerance for transient errors during API interactions.
"""

RETRY_BACKOFF = 5  
"""
int: The time, in seconds, to wait before retrying after a failed API request.

This constant specifies the delay introduced before making a retry attempt following a failed request. 
Introducing this backoff time helps to avoid overwhelming the server with rapid retry requests, thus enabling 
better handling of rate limits and server load management.

Usage:
    Adjust this duration to control how quickly the application should attempt to retry failed requests.
"""

CHROMA_COLLECTION_NAME = "python_file_contexts"  
"""
str: The name of the ChromaDB collection used to store context data.

This constant indicates the collection within a Chroma database where context-related data is stored when 
interacting with the database system. It facilitates organized data retrieval and management of persistent 
context throughout the application lifecycle.

Usage:
    Use this name when accessing or manipulating the ChromaDB collection for context storage.
"""

DATA_PATH = Path('./data/')

CACHE_FILE_NAME = str(DATA_PATH )+ "docstring_cache.json"
"""
str: The name of the file used for caching purposes.

This constant specifies the filename for storing cached data, which allows the application to efficiently 
save and retrieve data. Utilizing caching enhances performance by avoiding redundant computations or 
data retrievals, thereby reducing latency and improving the responsiveness of operations.

Usage:
    Utilize this filename when implementing caching logic to store and retrieve data efficiently.
"""

CONTEXT_SUMMARY_PATH = str(DATA_PATH) + "context_summary.json" 
"""
str: The path for storing context summaries.

This constant specifies the file path where context summaries are stored, enabling easy retrieval and 
management of context data for subsequent processing tasks. It ensures that important context information 
is preserved and can be accessed when needed.

Usage:
    Save context summaries to this path for future reference or processing tasks.
"""

DOCSTRING_AI_TAG = "# Docstring generated by docstring-ai : http://github.com/ph-ausseil/docstring-ai"

# logging_config.py
import logging
from colorama import Fore, Style, init

# Initialize colorama for cross-platform support
init()

class ColoredFormatter(logging.Formatter):
    """
    Custom formatter to add color coding to log messages based on their severity level.
    """
    COLOR_MAP = {
        logging.DEBUG: Fore.BLUE + Style.BRIGHT,   # Blue for DEBUG
        logging.INFO: Fore.GREEN + Style.BRIGHT,  # Green for INFO
        logging.WARNING: Fore.YELLOW + Style.BRIGHT,  # Yellow for WARNING
        logging.ERROR: Fore.RED + Style.BRIGHT,   # Red for ERROR
        logging.CRITICAL: Fore.RED + Style.BRIGHT + Style.BRIGHT  # Bold Red for CRITICAL
    }

    RESET = Style.RESET_ALL

    def format(self, record):
        """
        Formats the log record, applying color based on the severity level.

        Args:
            record (logging.LogRecord): The record containing information to log.

        Returns:
            str: The formatted log message with color coding for the log level.
        """
        color = self.COLOR_MAP.get(record.levelno, self.RESET)
        record.levelname = f"{color}{record.levelname}{self.RESET}"
        return super().format(record)


EXCLUDED_LOG_MODULES = ['_client', 'openai', 'urllib3', 'http.client', 'httpx','_trace' , 'httpcore' , 'chromadb.config', 'httpcore.connection' , 'httpcore.http11']

class ExcludeLibrariesFilter(logging.Filter):
    """
    Logging filter to exclude log messages from specified libraries.
    """
    def filter(self, record):
        """
        Determines whether a log record should be excluded based on its library origin.

        Args:
            record (logging.LogRecord): The log record to check.

        Returns:
            bool: True if the log record should be logged, False if it should be excluded.
        """
        return not any(record.name.startswith(module) for module in EXCLUDED_LOG_MODULES)

class HTTPRequestFilter(logging.Filter):
    """
    Logging filter to exclude HTTP request logs.
    """
    def filter(self, record):
        """
        Determines whether an HTTP request log record should be excluded.

        Args:
            record (logging.LogRecord): The log record to check.

        Returns:
            bool: True if the log record should be logged, False if it should be excluded.
        """
        return 'HTTP Request:' not in record.getMessage()


def setup_logging():
    """
    Configures logging for the application with color-coded formatting and filters for specific libraries.

    This function initializes the logging system by setting up the console handler and applying filters
    to suppress logs from specified libraries. It defines the logging level and formats the output for
    better readability.
    """
    formatter = ColoredFormatter(
        '%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
    )
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    logging.basicConfig(
        level=logging.INFO,
        handlers=[console_handler]
    )

    # Suppress logs from specific libraries
    for module in EXCLUDED_LOG_MODULES : 
        logging.getLogger(module).setLevel(logging.WARNING)

    # Apply filters to suppress specific logs
    for handler in logging.root.handlers:
        handler.addFilter(ExcludeLibrariesFilter())
        handler.addFilter(HTTPRequestFilter())
